//
// https://github.com/SteveKChiu/lua-intf
//
// Copyright 2013, Steve Chiu <steve.k.chiu@gmail.com>
//
// The MIT License (http://www.opensource.org/licenses/mit-license.php)
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#ifndef LUAREF_H
#define LUAREF_H

//---------------------------------------------------------------------------

#include "LuaState.h"
#include <functional>
#include <tuple>
#include <memory>

namespace LuaIntf
{

	class LuaRef;

	//---------------------------------------------------------------------------

	/**
	 * Assignable and convertible result of bracket-style lookup.
	 */
	class LuaTableRef
	{
	public:
		/**
		 * Create new index association.
		 *
		 * @param state the Lua state
		 * @param table the table reference (no auto unref)
		 * @param key the table key reference (it will be unref automatically)
		 */
		LuaTableRef(lua_State* state, int table, int key)
			: L(state)
			, m_table(table)
			, m_key(key)
		{
			assert(L);
		}

		/**
		 * Copy constructor for LuaTableRef.
		 */
		LuaTableRef(const LuaTableRef& that)
			: L(that.L)
			, m_table(that.m_table)
		{
			assert(L);
			lua_rawgeti(L, LUA_REGISTRYINDEX, that.m_key);
			m_key = luaL_ref(L, LUA_REGISTRYINDEX);
		}

		/**
		 * Move constructor for LuaTableRef.
		 */
		LuaTableRef(LuaTableRef&& that) noexcept
			: L(that.L)
			, m_table(that.m_table)
			, m_key(that.m_key)
		{
			assert(L);
			that.m_key = LUA_NOREF;
		}

		/**
		 * Destructor for LuaTableRef.
		 */
		~LuaTableRef()
		{
			luaL_unref(L, LUA_REGISTRYINDEX, m_key);
		}

		/**
		 * Copy value from other table[key] reference.
		 *
		 * @param that reference from other table[key]
		 */
		LuaTableRef& operator = (const LuaTableRef& that);

		/**
		 * Assign value for table[key].
		 *
		 * @param value new value for table[key]
		 * @throw LuaException if V are not convertible to Lua types
		 */
		template <typename V>
		LuaTableRef& operator = (const V& value)
		{
			lua_rawgeti(L, LUA_REGISTRYINDEX, m_table);
			lua_rawgeti(L, LUA_REGISTRYINDEX, m_key);
			Lua::push(L, value);
			lua_settable(L, -3);
			lua_pop(L, 1);
			return *this;
		}

		/**
		 * Get value of table[key].
		 * This may raise Lua error or throw LuaException if value is not convertible.
		 *
		 * @return value of t[k] as type V
		 * @throw LuaException if V are not convertible to Lua types
		 */
		template <typename V = LuaRef>
		V value() const
		{
			lua_rawgeti(L, LUA_REGISTRYINDEX, m_table);
			lua_rawgeti(L, LUA_REGISTRYINDEX, m_key);
			lua_gettable(L, -2);
			V v = Lua::get<V>(L, -1);
			lua_pop(L, 2);
			return v;
		}

	private:
		lua_State* L;
		int m_table;
		int m_key;
	};

	//---------------------------------------------------------------------------

	/**
	 * C++ style const iterator for this table
	 */
	class LuaTableIterator
	{
	public:
		/**
		 * Create empty LuaTableIterator, it must be assigned to other LuaTableIterator before using.
		 */
		constexpr LuaTableIterator()
			: L(nullptr)
			, m_table(LUA_NOREF)
			, m_key(LUA_NOREF)
			, m_value(LUA_NOREF)
		{}

		/**
		 * Create LuaTableIterator for table.
		 *
		 * @param state the Lua state
		 * @param table the Lua table reference (no auto unref)
		 * @param fetch_next true if fetch next entry first
		 */
		LuaTableIterator(lua_State* state, int table, bool fetch_next);

		/**
		 * Copy constructor for LuaTableIterator.
		 */
		LuaTableIterator(const LuaTableIterator& that);

		/**
		 * Move constructor for LuaTableIterator.
		 */
		LuaTableIterator(LuaTableIterator&& that);

		/**
		 * Destructor for LuaTableIterator.
		 */
		~LuaTableIterator();

		/**
		 * Get entry (for loop inerator compatibility).
		 */
		const LuaTableIterator& operator * () const
		{
			return *this;
		}

		/**
		 * Advance to next entry.
		 */
		LuaTableIterator& operator ++ ()
		{
			next();
			return *this;
		}

		/**
		 * Copy assignment for LuaTableIterator.
		 */
		LuaTableIterator& operator = (const LuaTableIterator& that);

		/**
		 * Move assignment for LuaTableIterator.
		 */
		LuaTableIterator& operator = (LuaTableIterator&& that) noexcept;

		/**
		 * Test whether the two iterator is at same position.
		 */
		bool operator == (const LuaTableIterator& that) const;

		/**
		 * Test whether the two iterator is not at same position.
		 */
		bool operator != (const LuaTableIterator& that) const
		{
			return !operator == (that);
		}

		/**
		 * Get the key of current entry.
		 * This may raise Lua error or throw LuaException if key is not convertible.
		 */
		template <typename K = LuaRef>
		K key() const
		{
			assert(L);
			lua_rawgeti(L, LUA_REGISTRYINDEX, m_key);
			return Lua::pop<K>(L);
		}

		/**
		 * Get the value of current entry.
		 * This may raise Lua error or throw LuaException if value is not convertible.
		 */
		template <typename V = LuaRef>
		V value() const
		{
			assert(L);
			lua_rawgeti(L, LUA_REGISTRYINDEX, m_value);
			return Lua::pop<V>(L);
		}

	private:
		void next();

	private:
		lua_State* L;
		int m_table;
		int m_key;
		int m_value;
	};

	//---------------------------------------------------------------------------

	/**
	 * Lightweight reference to a Lua object.
	 *
	 * The reference is maintained for the lifetime of the C++ object.
	 */
	class LuaRef
	{
	public:

		static  LuaRef createUserData(lua_State* L, size_t userdata_size, void** out_userdata = nullptr)
		{
			void* p = lua_newuserdata(L, userdata_size);
			if(out_userdata!=nullptr)
			{
				*out_userdata = p;
			}
			return popFromStack(L);
		}

		template <typename T>
		static LuaRef createUserDataFrom(lua_State* L, const T& cpp_obj)
		{

			return popFromStack(L);
		}

		static LuaRef popFromStack(lua_State* L)
		{
			return LuaRef(L);
		}

		static LuaRef globals(lua_State* L)
		{
			lua_pushglobaltable(L);
			return popFromStack(L);
		}

		static LuaRef registry(lua_State* L)
		{
			return LuaRef(L, LUA_REGISTRYINDEX);
		}

		constexpr LuaRef()
			:L(nullptr),
			m_ref(LUA_NOREF)
		{
			
		}

		LuaRef(lua_State* state, nullptr_t)
			:L(state),
			m_ref(LUA_REFNIL)
		{
			assert(L);
		}

		LuaRef(lua_State* state, int index)
			:L(state)
		{
			assert(L);
			lua_pushvalue(L, index);
			m_ref = luaL_ref(L, LUA_REGISTRYINDEX);
		}

		LuaRef(lua_State* state, const char* name)
			:L(state)
		{
			assert(L);
			Lua::pushGlobal(L, name);
			m_ref = luaL_ref(L, LUA_REGISTRYINDEX);
		}

		LuaRef(const LuaRef& that);

		LuaRef(LuaRef&&  that) noexcept
			:L(that.L)
		{
			m_ref = that.m_ref;
			that.m_ref = LUA_NOREF;
		}

		~LuaRef()
		{
			if(L)
			{
				luaL_unref(L, LUA_REGISTRYINDEX, m_ref);
			}
		}

		LuaRef& operator = (const LuaRef& that);

		LuaRef& operator = (LuaRef&& that) noexcept
		{
			std::swap(L, that.L);
			std::swap(m_ref, that.m_ref);
			return *this;
		}

		LuaRef& operator = (std::nullptr_t)
		{
			if(L)
			{
				luaL_unref(L, LUA_REGISTRYINDEX, m_ref);
				m_ref = LUA_REFNIL;
			}
			return *this;
		}

		lua_State* state() const
		{
			return L;
		}

		bool isValid() const
		{
			return m_ref != LUA_NOREF;
		}

		bool isTable() const
		{
			return type() == LuaTypeID::TABLE;
		}

		bool isFunction() const
		{
			return type() == LuaTypeID::FUNCTION;
		}

		

		LuaTypeID type() const;

		const char* typeName() const
		{
			return lua_typename(L, static_cast<int>(type()));
		}

		const LuaRef& checkTable() const
		{
			return checkType(LuaTypeID::TABLE);
		}

		const LuaRef& checkFunction() const
		{
			return checkType(LuaTypeID::FUNCTION);
		}
		const LuaRef& checkType(LuaTypeID type) const
		{
			pushToStack();
			luaL_checktype(L, -1, static_cast<int>(type));
			lua_pop(L, 1);
			return *this;
		}

		bool isIdenticalTo(const LuaRef& r) const;
		int compareTo(const LuaRef& r) const;
		bool operator == (const LuaRef& r) const;
		bool operator == (std::nullptr_t) const
		{
			return m_ref == LUA_REFNIL || m_ref == LUA_NOREF;
		}

		/**
	* Test whether this reference is not equal to the other reference.
	*/
		bool operator != (const LuaRef& r) const
		{
			return !operator == (r);
		}

		/**
		 * Test whether this is not nil.
		 */
		bool operator != (std::nullptr_t r) const
		{
			return !operator == (r);
		}

		/**
	 * Test whether this reference is less than the other reference.
	 */
		bool operator < (const LuaRef& r) const;

		/**
		 * Test whether this reference is less than or equal to the other reference.
		 */
		bool operator <= (const LuaRef& r) const;

		/**
		 * Test whether this reference is greater than the other reference.
		 */
		bool operator > (const LuaRef& r) const
		{
			return !operator <= (r);
		}

		/**
		 * Test whether this reference is greater than or equal to the other reference.
		 */
		bool operator >= (const LuaRef& r) const
		{
			return !operator < (r);
		}
		/**
		 * Test whether this reference is valid and not nil.
		 */
		explicit operator bool() const
		{
			return m_ref != LUA_NOREF && m_ref != LUA_REFNIL;
		}

		void pushToStack() const
		{
			assert(L);
			lua_rawgeti(L, LUA_REGISTRYINDEX, m_ref);
		}

		template <typename T>
		T toValue() const
		{
			pushToStack();
			return Lua::pop<T>(L);
		}

		template <typename T>
		static LuaRef fromValue(lua_State* L, const T& value)
		{
			Lua::push(L, value);
			return popFromStack(L);
		}

		void* toPtr() const
		{
			pushToStack();
			void* ptr = lua_touserdata(L, -1);
			lua_pop(L, 1);
			return ptr;
		}

		/**
		 * Create LuaRef from data pointer, the data pointer life time is managed by C++.
		 */
		static LuaRef fromPtr(lua_State* L, void* ptr)
		{
			lua_pushlightuserdata(L, ptr);
			return popFromStack(L);
		}

		/**
		 * Get this table's metatable.
		 *
		 * @return this table's metatable or nil if none
		 */
		LuaRef getMetaTable() const;

		/**
		 * Set this table's metatable.
		 *
		 * @param meta new metatable
		 */
		void setMetaTable(const LuaRef& meta) const;

		/**
		 * Look up field in table in raw mode (not via metatable).
		 * This may raise Lua error or throw LuaException if K or V is not convertible.
		 *
		 * @param key field key
		 * @return field value
		 */
		template <typename V = LuaRef, typename K>
		V rawget(const K& key) const
		{
			pushToStack();
			Lua::push(L, key);
			lua_rawget(L, -2);
			V v = Lua::get<V>(L, -1);
			lua_pop(L, 2);
			return v;
		}

		/**
		 * Look up field in table in raw mode (not via metatable).
		 * This may raise Lua error or throw LuaException if K or V is not convertible.
		 *
		 * @param key field key
		 * @param def default value if the field is missing
		 * @return field value
		 */
		template <typename V, typename K>
		V rawget(const K& key, const V& def) const
		{
			pushToStack();
			Lua::push(L, key);
			lua_rawget(L, -2);
			V v = Lua::opt<V>(L, -1, def);
			lua_pop(L, 2);
			return v;
		}


		/**
		* Set field in table in raw mode (not via metatable).
		* This may raise Lua error or throw LuaException if K or V is not convertible.
		*
		* @param key field key
		* @param value field value
		*/
		template <typename K, typename V>
		void rawset(const K& key, const V& value)
		{
			pushToStack();
			Lua::push(L, key);
			Lua::push(L, value);
			lua_rawset(L, -3);
			lua_pop(L, 1);
		}
		/**
		 * Look up field in table in raw mode (not via metatable).
		 * This may raise Lua error or throw LuaException if V is not convertible.
		 *
		 * @param p field key
		 * @return field value
		 */
		template <typename V = LuaRef>
		V rawgetp(void* p) const
		{
			pushToStack();
			lua_rawgetp(L, -1, p);
			V v = Lua::get<V>(L, -1);
			lua_pop(L, 2);
			return v;
		}

		/**
		 * Look up field in table in raw mode (not via metatable).
		 * This may raise Lua error or throw LuaException if V is not convertible.
		 * This is the same as rawgetp, just for convenience.
		 *
		 * @param p field key
		 * @return field value
		 */
		template <typename V = LuaRef>
		V rawget(void* p) const
		{
			return rawgetp<V>(p);
		}

		/**
		* Look up field in table in raw mode (not via metatable).
		* This may raise Lua error or throw LuaException if V is not convertible.
		*
		* @param p field key
		* @param def default value if the field is missing
		* @return field value
		*/
		template <typename V>
		V rawgetp(void* p, const V& def) const
		{
			pushToStack();
			lua_rawgetp(L, -1, p);
			V v = Lua::opt<V>(L, -1, def);
			lua_pop(L, 2);
			return v;
		}

		/**
		 * Look up field in table in raw mode (not via metatable).
		 * This may raise Lua error or throw LuaException if V is not convertible.
		 * This is the same as rawgetp, just for convenience.
		 *
		 * @param p field key
		 * @param def default value if the field is missing
		 * @return field value
		 */
		template <typename V>
		V rawget(void* p, const V& def) const
		{
			return rawgetp(p, def);
		}

		/**
		 * Set field in table in raw mode (not via metatable).
		 * This may raise Lua error or throw LuaException if V is not convertible.
		 *
		 * @param i field key
		 * @param value field value
		 */
		template <typename V>
		void rawset(int i, const V& value)
		{
			pushToStack();
			Lua::push(L, value);
			lua_rawseti(L, -2, i);
			lua_pop(L, 1);
		}

		/**
		 * Get the length of this table (the same as # operator of Lua, but not via metatable).
		 */
		int rawlen() const
		{
			pushToStack();
			int n = int(lua_rawlen(L, -1));
			lua_pop(L, 1);
			return n;
		}

		/**
		 * Test whether the field is in this table.
		 * This may raise Lua error or throw LuaException if K is not convertible.
		 *
		 * @param key field key
		 * @return true if field is available
		 */
		template <typename K>
		bool has(const K& key) const
		{
			pushToStack();
			Lua::push(L, key);
			lua_gettable(L, -2);
			bool ok = !lua_isnoneornil(L, -1);
			lua_pop(L, 2);
			return ok;
		}

		/**
		 * Look up field in this table.
		 * This may raise Lua error or throw LuaException if K or V is not convertible.
		 *
		 * @param key field key
		 * @return field value
		 */
		template <typename V = LuaRef, typename K>
		V get(const K& key) const
		{
			pushToStack();
			Lua::push(L, key);
			lua_gettable(L, -2);
			V t = Lua::get<V>(L, -1);
			lua_pop(L, 2);
			return t;
		}

		/**
		 * Look up field in this table.
		 * This may raise Lua error or throw LuaException if K or V is not convertible.
		 *
		 * @param key field name
		 * @param def default value if the field is missing
		 * @return field value
		 */
		template <typename V, typename K>
		V get(const K& key, const V& def) const
		{
			pushToStack();
			Lua::push(L, key);
			lua_gettable(L, -2);
			V t = Lua::opt<V>(L, -1, def);
			lua_pop(L, 2);
			return t;
		}

		/**
		 * Set field in this table.
		 * This may raise Lua error or throw LuaException if K or V is not convertible.
		 *
		 * @param key field key
		 * @param value field value
		 */
		template <typename K, typename V>
		void set(const K& key, const V& value)
		{
			pushToStack();
			Lua::push(L, key);
			Lua::push(L, value);
			lua_settable(L, -3);
			lua_pop(L, 1);
		}

		/**
		 * Remove field in table.
		 * This may raise Lua error or throw LuaException if K is not convertible.
		 *
		 * @param key field key
		 */
		template <typename K>
		void remove(const K& key)
		{
			pushToStack();
			Lua::push(L, key);
			lua_pushnil(L);
			lua_settable(L, -3);
			lua_pop(L, 1);
		}

		/**
		 * Get the length of this table (the same as # operator of Lua).
		 */
		int len() const
		{
			pushToStack();
			int n = int(luaL_len(L, -1));
			lua_pop(L, 1);
			return n;
		}

		/**
		 * Get or set field in this table with bracket-style syntax.
		 * This may raise Lua error or throw LuaException if K is not convertible.
		 *
		 * @param key field key
		 * @return assignable and convertible handle for specified key in this table
		 */
		template <typename K>
		LuaTableRef operator [] (const K& key)
		{
			assert(L);
			Lua::push(L, key);
			return LuaTableRef(L, m_ref, luaL_ref(L, LUA_REGISTRYINDEX));
		}

		/**
		 * Get the C++ style const iterator.
		 */
		LuaTableIterator begin() const
		{
			return LuaTableIterator(L, m_ref, true);
		}

		/**
		 * Get the C++ style const iterator.
		 */
		LuaTableIterator end() const
		{
			return LuaTableIterator(L, m_ref, false);
		}
	private:
		/**
		 * Special constructor for popFromStack.
		 */
		explicit LuaRef(lua_State* state)
			: L(state)
		{
			assert(L);
			m_ref = luaL_ref(state, LUA_REGISTRYINDEX);
		}

		lua_State* L;
		int m_ref;

	};


#if LUAINTF_HEADERS_ONLY
#include "src/LuaRef.cpp"
#endif

	//---------------------------------------------------------------------------

}

#endif
